import 'package:doctor_appointment/core/networking/api_error_handler.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
part 'api_result.freezed.dart';

@Freezed()
abstract class ApiResult<T> with _$ApiResult<T> {
  const factory ApiResult.success(T data) = Success<T>;
  const factory ApiResult.failure(ErrorHandler errorHandler) = Failure<T>;
}


// @Freezed()
// abstract class ApiResult<T> with _$ApiResult<T> {
// The @Freezed() annotation tells the freezed package to generate code for the ApiResult class.
// ApiResult<T> is a generic abstract class, meaning it can work with any type of data (T).
// The with _$ApiResult<T> is a mixin that gives ApiResult access to some helper methods generated by freezed.

// 3. Factory Constructors

//   const factory ApiResult.success(T data) = Success<T>;
//   const factory ApiResult.failure(ErrorHandler errorHandler) = Failure<T>;
// ApiResult.success: This is a factory constructor that creates an ApiResult representing a successful API response, holding data of type T.


// ApiResult.success(T data)
// When an API call is successful, the data is stored inside an instance of the Success<T> class.

// ApiResult.failure: This factory constructor represents a failure in the API call. It takes an ErrorHandler as an argument, which holds details about the error.


// ApiResult.failure(ErrorHandler errorHandler)
// When an API call fails, the error information is stored in an instance of the Failure<T> class.

